// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StonePizza.Data;

namespace StonePizza.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200304000546_menuConfig")]
    partial class menuConfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StonePizza.Models.Beverage", b =>
                {
                    b.Property<int>("BeverageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BeverageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BeverageId");

                    b.ToTable("Beverages");

                    b.HasData(
                        new
                        {
                            BeverageId = 4,
                            BeverageDescription = "Carbonated soft drink product from major company",
                            ItemName = "Fountain drink",
                            ItemPrice = 1.50m
                        },
                        new
                        {
                            BeverageId = 99,
                            BeverageDescription = "Locally brewed craft beer",
                            ItemName = "Beer",
                            ItemPrice = 5.50m
                        },
                        new
                        {
                            BeverageId = 95,
                            BeverageDescription = "Bottled water",
                            ItemName = "Water",
                            ItemPrice = 1.20m
                        },
                        new
                        {
                            BeverageId = 66,
                            BeverageDescription = "Electrolyte-rich soft drink",
                            ItemName = "Sports drink",
                            ItemPrice = 2.50m
                        });
                });

            modelBuilder.Entity("StonePizza.Models.CustomPizza", b =>
                {
                    b.Property<int>("CustomPizzaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PizzaCheese")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PizzaCrust")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PizzaSauce")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomPizzaId");

                    b.ToTable("CustomPizzas");
                });

            modelBuilder.Entity("StonePizza.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameOnOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StonePizza.Models.PizzaTopping", b =>
                {
                    b.Property<int>("ToppingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomPizzaId")
                        .HasColumnType("int");

                    b.Property<string>("ToppingName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToppingId");

                    b.HasIndex("CustomPizzaId");

                    b.ToTable("Toppings");
                });

            modelBuilder.Entity("StonePizza.Models.SideDish", b =>
                {
                    b.Property<int>("SideDishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SideDishDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SideDishId");

                    b.ToTable("SideDishes");

                    b.HasData(
                        new
                        {
                            SideDishId = 86,
                            Category = "Breadsticks",
                            ItemName = "Breadsticks",
                            ItemPrice = 6.99m,
                            SideDishDescription = "Garlic parmesan butter breadsticks"
                        },
                        new
                        {
                            SideDishId = 69,
                            Category = "Salads",
                            ItemName = "Chef Salad",
                            ItemPrice = 4.99m,
                            SideDishDescription = "Romaine, bacon, red onion, grape tomato, goat cheese, blue cheese dressing"
                        },
                        new
                        {
                            SideDishId = 42,
                            Category = "Salads",
                            ItemName = "Classic Chicken Caesar",
                            ItemPrice = 4.99m,
                            SideDishDescription = "Romaine, all-natural chicken breast, parmesan, crouton, caesar dressing"
                        },
                        new
                        {
                            SideDishId = 85,
                            Category = "Salads",
                            ItemName = "Chopped Antipasto",
                            ItemPrice = 4.99m,
                            SideDishDescription = "Romaine, pepperoni, mozzarella, grape tomato, black olive, banana pepper, red onion, red wine vinegar and olive oil vinagrette"
                        },
                        new
                        {
                            SideDishId = 98,
                            Category = "Salads",
                            ItemName = "Bacon & Blu",
                            ItemPrice = 4.99m,
                            SideDishDescription = "Romaine, bacon, red onion, grape tomato, goat cheese, blue cheese dressing"
                        },
                        new
                        {
                            SideDishId = 25,
                            Category = "Chicken Wings",
                            ItemName = "Buffalo Chicken Wings",
                            ItemPrice = 7.50m,
                            SideDishDescription = "12 bone-in hot wings doused with Buffalo sauce"
                        },
                        new
                        {
                            SideDishId = 7,
                            Category = "Chicken Wings",
                            ItemName = "BBQ Chicken Wings",
                            ItemPrice = 7.50m,
                            SideDishDescription = "12 bone-in chicken wings doused with BBQ sauce"
                        });
                });

            modelBuilder.Entity("StonePizza.Models.SignaturePizza", b =>
                {
                    b.Property<int>("PizzaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PizzaCheese")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PizzaCrust")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PizzaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PizzaSauce")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PizzaId");

                    b.ToTable("SignaturePizzas");

                    b.HasData(
                        new
                        {
                            PizzaId = 61,
                            ItemName = "The James Brown",
                            ItemPrice = 14.00m,
                            PizzaCheese = "Mozzarella",
                            PizzaCrust = "Traditional",
                            PizzaDescription = "Makes you want to dance!",
                            PizzaSauce = "Traditional"
                        },
                        new
                        {
                            PizzaId = 18,
                            ItemName = "The Ray Charles",
                            ItemPrice = 14.50m,
                            PizzaCheese = "Mozzarella",
                            PizzaCrust = "Traditional",
                            PizzaDescription = "It'll put Georgia on your mind!",
                            PizzaSauce = "Garlic Alfredo"
                        },
                        new
                        {
                            PizzaId = 3,
                            ItemName = "The Stevie Wonder",
                            ItemPrice = 16.50m,
                            PizzaCheese = "Vegan Cheese",
                            PizzaCrust = "Gluten-free",
                            PizzaDescription = "It'll make you superstitious!",
                            PizzaSauce = "Traditional"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StonePizza.Models.PizzaTopping", b =>
                {
                    b.HasOne("StonePizza.Models.CustomPizza", null)
                        .WithMany("CustomPizzaToppings")
                        .HasForeignKey("CustomPizzaId");
                });
#pragma warning restore 612, 618
        }
    }
}
